name: Deploy AWS Lambda Functions

on:
  workflow_call:
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_DEPLOYMENT_BUCKET:
        required: true
      AWS_APPLICATION_BUCKET:
        required: true
      OPENAI_API_KEY:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      
      - name: Setup AWS SAM CLI
        uses: aws-actions/setup-sam@v1
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Check stack status and delete if needed
        run: |
          # Check if stack exists and is in ROLLBACK_COMPLETE state
          STACK_STATUS=$(aws cloudformation describe-stacks --stack-name job-assistant-stack --query "Stacks[0].StackStatus" --output text 2>/dev/null || echo "STACK_NOT_FOUND")
          
          if [ "$STACK_STATUS" == "ROLLBACK_COMPLETE" ]; then
            echo "Stack is in ROLLBACK_COMPLETE state, deleting it..."
            aws cloudformation delete-stack --stack-name job-assistant-stack
            echo "Waiting for stack deletion to complete..."
            aws cloudformation wait stack-delete-complete --stack-name job-assistant-stack
            echo "Stack deleted successfully"
          elif [ "$STACK_STATUS" != "STACK_NOT_FOUND" ]; then
            echo "Stack exists in state: $STACK_STATUS"
          else
            echo "Stack does not exist, will create new stack"
          fi
      
      - name: Create S3 buckets if they don't exist
        run: |
          # Check if the application bucket exists
          if aws s3api head-bucket --bucket ${{ secrets.AWS_APPLICATION_BUCKET }} 2>/dev/null; then
            echo "Application bucket exists and is accessible"
          else
            echo "Application bucket doesn't exist, creating it..."
            aws s3 mb s3://${{ secrets.AWS_APPLICATION_BUCKET }} --region us-east-2
            
            # Configure bucket for website hosting if needed
            aws s3 website s3://${{ secrets.AWS_APPLICATION_BUCKET }} --index-document index.html
            
            # Set lifecycle policy to expire objects after 30 days
            aws s3api put-bucket-lifecycle-configuration \
              --bucket ${{ secrets.AWS_APPLICATION_BUCKET }} \
              --lifecycle-configuration '{
                "Rules": [
                  {
                    "ID": "ExpireDocumentsAfter30Days",
                    "Status": "Enabled",
                    "Prefix": "",
                    "Expiration": {
                      "Days": 30
                    }
                  }
                ]
              }'
            
            echo "Application bucket created and configured"
          fi
          
          # Create deployment bucket if it doesn't exist
          if aws s3api head-bucket --bucket ${{ secrets.AWS_DEPLOYMENT_BUCKET }} 2>/dev/null; then
            echo "Deployment bucket exists and is accessible"
          else
            echo "Deployment bucket doesn't exist, creating it..."
            aws s3 mb s3://${{ secrets.AWS_DEPLOYMENT_BUCKET }} --region us-east-2
            echo "Deployment bucket created"
          fi
      
      - name: Install and package models
        run: |
          # Install models package
          cd models
          pip install -e .
          cd ..
          
          # Copy models to AWS Lambda functions
          mkdir -p aws/shared/python
          cp -r models aws/shared/python/job_assistant_models
          
          # Create a layer directory structure
          mkdir -p aws/layer/python
          cp -r models aws/layer/python/job_assistant_models
      
      - name: Build with ARM architecture
        run: |
          cd aws
          # Build with ARM architecture
          sam build --use-container
      
      - name: Deploy with SAM
        run: |
          cd aws
          # Deploy with specified S3 bucket and additional capabilities
          sam deploy --stack-name job-assistant-stack \
            --s3-bucket ${{ secrets.AWS_DEPLOYMENT_BUCKET }} \
            --capabilities CAPABILITY_IAM CAPABILITY_AUTO_EXPAND \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --parameter-overrides \
            Environment=${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }} \
            OpenAIApiKey=${{ secrets.OPENAI_API_KEY }} \
            S3BucketName=${{ secrets.AWS_APPLICATION_BUCKET }}